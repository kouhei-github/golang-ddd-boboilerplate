// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kouhei-github/golang-ddd-boboilerplate/application/use_case/auth_use_case"
	"github.com/kouhei-github/golang-ddd-boboilerplate/env"
	repositories "github.com/kouhei-github/golang-ddd-boboilerplate/infrastructure/datastore/repositoryImpl"
	"github.com/kouhei-github/golang-ddd-boboilerplate/infrastructure/external/jwt_token_external"
	handlers "github.com/kouhei-github/golang-ddd-boboilerplate/presentation/api/server/controller"
	"github.com/kouhei-github/golang-ddd-boboilerplate/presentation/api/server/router"
	"gorm.io/gorm"
)

func NewRouter(db gorm.DB, env env.Lib) router.Router {
	// ユーザー
	userRepo := repositories.NewUserRepository(db)

	// signUpUseCase
	signUpUseCase := auth_use_case.NewSignUpUseCase(userRepo)

	// JWT Token External
	jwtExternal := jwt_token_external.NewJwtToken()
	refreshTokenUseCase := auth_use_case.NewRefreshTokenUseCase(userRepo, jwtExternal)

	loginUseCase := auth_use_case.NewLoginUseCase(userRepo, jwtExternal)
	// HandlerにUseCaseを渡す
	signUpHandler := handlers.NewAuthHandler(signUpUseCase, refreshTokenUseCase, loginUseCase)

	routerRouter := router.NewRouter(signUpHandler)
	return routerRouter
}
